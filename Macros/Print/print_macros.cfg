[gcode_macro START_PRINT]
gcode: 
  # Parameters
	{% set bed = params.BED|int %}
	{% set hotend = params.HOTEND|int %}
	{% set chamber = params.CHAMBER|default(0)|int %}
    {% set material = params.MATERIAL|default('')|string %}
    {% set nozzle = params.NOZZLE|default('0')|string %}
    {% set fanspd = printer["gcode_macro MACROS_VARS"].circ_fan_speed|default(0)%}
    #{% set z_adjust = params.Z_ADJUST|default(0)|float %}


# Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    #SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=filament_material VALUE={params.MATERIAL} 

  DISPLAYTEXT TEXT="Material: {material}..."
  DISPLAYTEXT TEXT="Nozzle: {nozzle}..."
  DISPLAYTEXT TEXT="Chamber Temp: {chamber}..."

### Reset and Safety Macros ###
    BED_MESH_CLEAR
	CANCEL_OFF_TIMER
    CANCEL_NEVERMORE_TIMER
	CASE_LED_ON
	RESETSPEEDS
    #RESET_Z_OFFSET
    SET_NOZZLE_LEDS_ON
    #SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1 PROBE_DOCK_ENABLE=0
    #SETUP_VORON_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1 SIZE=12 TIP_DISTANCE=8 FLOW_RATE=10
    STATUS_HEATING

### Starting Macros ###
    MATERIAL_PA MATERIAL={material} NOZZLE={nozzle}				
    MATERIAL_NEVERMORE MATERIAL={material} 
    SET_TEMP HEATER="bed" TEMP={bed}
    SET_TEMP HEATER="extruder" TEMP={probetmp} WAIT=1
    HOME
	ABSOLUTE_COORDINATES																				
    VERIFY_HEATSOAK BED={bed} CHAMBER={chamber}
    CLEAN_NOZZLE
    QUAD_GANTRY_LEVEL
    #SET_GCODE_OFFSET Z_ADJUST={z_adjust} MOVE=1
    BED_MESH_CALIBRATE
    Z_HOP_5
    SET_TEMP HEATER="extruder" TEMP={hotend} WAIT=1
    CLEAN_NOZZLE
    VORON_PURGE
    DISPLAYTEXT TEXT="Printing..."
    CLEAR_PAUSE    
    STATUS_PRINTING
    


######################################################################################
#                  CHAMBER TEMP 
######################################################################################

[gcode_macro WAKE_AND_BAKE]
gcode:
     ### Reset and Safety Macros ###
    CANCEL_OFF_TIMER
    CANCEL_NEVERMORE_TIMER
 	CASE_LED_ON
   	RESETSPEEDS
   	RESETRGB
    SET_NOZZLE_LEDS_ON
    STATUS_HEATING
    NEVERMORE_ON

    HEATSOAK

[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(100)|int %}
	{% set move = params.MOVE|default(1)|int %}
    {% set fanspd = printer["gcode_macro MACROS_VARS"].circ_fan_speed|default(0)%}
    {% set probetmp = printer["gcode_macro MACROS_VARS"].probe_temp|default(0)%}

    # Heat bed
	SET_TEMP HEATER="bed" TEMP={t}
    # Set hotend to no-ooze temp and turn on part fan (80%)
	{% if t >= 100 %}
		SET_TEMP HEATER="extruder" TEMP={probetmp}
		SET_FAN SPEED={fanspd}
	{% else %}
        # turn off part cooling fan
		SET_FAN 
	{% endif %}
	{% if move == 1 %}
		C_HOME
		PARKCENTER
	{% endif %}

[gcode_macro VERIFY_HEATSOAK]
gcode:
    # Parameters
    {% set chamber = params.CHAMBER|default(0)|int %}
    {% set bed = params.BED|int %}

    STATUS_HEATING
    # If chamber is not at temp yet
    {% if printer["temperature_sensor chamber"].temperature < chamber %}
        # heatsoak macro + park in center
		HEATSOAK T={bed} MOVE=1		
        # Heat bed, wait for final chamber temp
        SET_TEMP HEATER="bed" TEMP={bed} WAIT=1
		TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber}
	{% else %}	
        # if chamber is already at temp,but bed is not fully heated (within 2C):
        # heatsoak, park, and wait for bed final temp
		{% if printer.heater_bed.temperature < (bed-2) %}												
			HEATSOAK T={bed} MOVE=1
            SET_TEMP HEATER="bed" TEMP={bed} WAIT=1
		{% else %}																						
            # and if bed is already heated, heatsoak without parking
			HEATSOAK T={bed} MOVE=0
		{% endif %}
	{% endif %}	
	SET_FAN	
    STATUS_READY


[gcode_macro END_PRINT]
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    CASE_LED_LOW
	#SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	CLEAR_PAUSE
	CLEAR_BUFFER
    SET_FAN
    ABSOLUTE_COORDINATES                           	    			 												
	PARKEND
    ENDING_RETRACTION
    TURN_OFF_HEATERS								
	BED_MESH_CLEAR
#    MATERIAL_FILTER_CHAMBER #MATERIAL={printer["gcode_macro PRINT_START"].material_macro}
    UPDATE_DELAYED_GCODE ID=DELAYED_NEVERMORE_OFF DURATION=600
	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=1800 ; turn everything off in 30 min
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    DISPLAYTEXT TEXT="Print finished!"
    DISABLE_MOTORS
    STATUS_OFF

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    SDCARD_RESET_FILE
    END_PRINT
    CANCEL_PRINT_BASE


#[gcode_macro check_temp]
#gcode:
#  {% set count = 450 %}  ###1200  a 1 secondo 450=7.5 minuti...
#  {% for c in range(count) %}
#   # templedcolor_timer 
#  {% endfor %}  

####################################################################################################################
#                  PAUSE / RESUME
####################################################################################################################


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	# Parameters
	{% set z = params.Z|default(10)|int %}																					; z hop amount
	
	{% if printer['pause_resume'].is_paused|int == 0 %}		
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    						; set z hop variable for reference in resume macro
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}									; set hotend temp variable for reference in resume macro
								
		#SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0																	; disable filament sensor		
		SAVE_GCODE_STATE NAME=PAUSE																							; save current print position for resume				
		BASE_PAUSE																											; pause print
		{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
			RELATIVE_COORDINATES																							; relative positioning
			G1 Z{z} F900																									; raise Z up by z hop amount
		{% else %}
			{ action_respond_info("Pause zhop exceeds maximum Z height.") }													; if z max is exceeded, show message and set zhop value for resume to 0
			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
		{% endif %}
		ABSOLUTE_COORDINATES																								; absolute positioning
  		PARKPAUSE								                                                                            ; park toolhead at front center
        FORM_TIP
        SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)	
        SET_TEMP HEATER="extruder" TEMP=0
		SET_IDLE_TIMEOUT TIMEOUT=43200															    						; set timeout to 12 hours
        STATUS_OFF
	{% endif %}


# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
	# Parameters
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
		#SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1																; enable filament sensor
        STATUS_BUSY
#		RESETRGB																											; reset LCD color
		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
		{% if etemp > 0 %}
	#		M109 S{etemp|int}																								; wait for hotend to heat back up
            SET_TEMP HEATER="extruder" TEMP={etemp|int} WAIT=1
		{% endif %}
        PARKPURGE
        FILAMENT_PURGE                                                                                                     ; park toolhead at purge bucket and purge filament
        CLEAN_NOZZLE
		RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)						
		RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450																; restore position
        STATUS_PRINTING
		BASE_RESUME																											; resume print
	{% endif %}


